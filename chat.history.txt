DUAL SESSION DEMO - CHAT HISTORY

User Request:
Create a simple demonstration of dual session use in terraform and python with:
- Two buckets (source and destination)
- Two bucket access roles (source reader, destination writer) adoptable by lambda execution role
- Python lambda that creates test object, uses dual sessions to read from source and write to destination

Implementation Created:
1. Terraform configuration (main.tf) with:
   - S3 buckets with security features (encryption, versioning, public access blocking)
   - IAM roles and policies for dual session access
   - Lambda function with environment variables
   - Lifecycle policies for cost optimization
   - Resource tagging

2. Python Lambda function (lambda_function.py) that:
   - Creates test object in source bucket
   - Assumes source reader role to read object
   - Assumes destination writer role to write object
   - Verifies successful copy with error handling

3. Deployment scripts:
   - initialize.sh: Check prerequisites and initialize Terraform
   - deploy.sh: Package Lambda and apply Terraform changes
   - plan.sh: Show Terraform plan without applying
   - run.sh: Invoke Lambda function and verify results

Issues Identified and Fixed:
1. Circular dependency in IAM roles - Fixed by reordering resource definitions
2. Missing S3 bucket security features - Added public access blocks, encryption, versioning
3. Lambda zip creation in wrong script - Moved to deployment script for code updates
4. Missing .gitignore - Added to exclude Terraform and generated files
5. S3 lifecycle configuration warning - Added required filter blocks
6. Permission error in verification - Added s3:GetObject to destination writer role

Final Result:
Successfully demonstrated dual session functionality where Lambda function uses different IAM roles to access different S3 buckets, with proper security controls and error handling.

Key Learning:
The implementation shows how to use AWS STS AssumeRole to create sessions with different permissions within a single Lambda execution, enabling fine-grained access control for different operations.